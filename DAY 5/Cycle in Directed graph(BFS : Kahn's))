int detectCycleInDirectedGraph(int n, vector <pair<int,int>> & edges)
{
   vector<int> adj[n+1];
     for(int i=0; i<edges.size(); i++)
     {
         int u = edges[i].first;
         int v = edges[i].second;
         adj[u].push_back(v);
     }
    
    // find all indegree
    vector<int> indegree(n);
      for(auto i:adj)
      {
          for(auto j:i.second)
          {
              indegree[j]++;
          }
      }
    
    // push the 0 indegree ones in queue
    queue<int>q;
      for(int i=1; i<=n; i++)
      {
          if(indegree[i]==0)
              q.push(i);
      }
    
    // do bfs
        int cnt=0;
         while(!q.empty())
         {
             int front = q.front();
             q.pop();
             
             cnt++;
             
             // neighbour indegree update
             for(auto neighbour : adj[front])
             {
                 indegree[neighbour]--;
                 if(indegree[neighbour] == 0)
                     q.push(neighbour);
             } 
         }
    if(cnt==n)
        return false;
    else
        return true;
}
