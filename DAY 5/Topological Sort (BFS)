/* TOPOLOGICAL SORT(BFS)

1. Find the indegree of all vertices.
2. Store those vertices in the queue whose indegree = 0
3. DO BFS.
- Take current vertex from the queue.
- Add it in ans.
- Explore neighbours.
- Update indegree of neighbour by -1.
- If indegree is 0, then again push that vertex in the queue.
- Return ans which will contain the topological sort.   */

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	      // find all indegree
          vector<int> indegree(V);
              for(int i=0; i<V; i++)
              {
                for(auto it: adj[i])
                    indegree[it]++;
                
              }
    
           // push the 0 indegree ones in queue
            queue<int>q;
            for(int i=0; i<V; i++)
            {
                if(indegree[i]==0)
                    q.push(i);
            } 
    
            // do bfs
             vector<int>ans;
                 while(!q.empty())
                 {
                   int front = q.front();
                   q.pop();
             
                   ans.push_back(front);
             
                   // neighbour indegree update
                   for(auto neighbour : adj[front])
                   {
                       indegree[neighbour]--;
                       //if neighbour indegree is again 0, push into the queue
                        if(indegree[neighbour] == 0)
                            q.push(neighbour);
                   } 
                   
                  }
    return ans;
	}
};
