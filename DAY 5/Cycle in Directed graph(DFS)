bool dfsCycle(int source, unordered_map<int,vector<int>> &adj, unordered_map<int,bool> &visited,unordered_map<int,bool> &dfsVisited)
{
    visited[source]=1;
    dfsVisited[source]=1;
    
    for(auto i:adj[source])
    {
        if(visited[i]==1 && dfsVisited[i]==1)
        {
            return true;
        }
        else
        {
            if( dfsCycle(i,adj,visited,dfsVisited) )
                return true;
        }
    }
    dfsVisited[source]=0;
    return false;
    
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) 
{
  unordered_map<int,vector<int>> adj;
    for(int i=0;i<n;++i)
    {
        int u=edges[i].first;
        int v=edges[i].second;
        
        adj[u].push_back(v);//directed graph
    }
    
    unordered_map<int,bool> visited;
    unordered_map<int,bool> dfsVisited; 
    for(int i=1;i<=n;++i)
    {
        if(!visited[i])
        {
           if( dfsCycle(i,adj,visited,dfsVisited) )
               return 1;
           
        }
    }
    return 0;
}
